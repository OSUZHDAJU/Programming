package Global;




import java.sql.*;

/**
 * A class for handle database.
 */
public class DBInteraction {
    // Table names
    public static final String LAB_WORK = "lab_work";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String PERSON_TABLE = "person";
    // LAB_WORK_TABLE column names
    public static final String LAB_WORK_TABLE_ID_COLUMN = "id";
    public static final String LAB_WORK_TABLE_NAME_COLUMN = "name";
    public static final String LAB_WORK_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String LAB_WORK_TABLE_MINIMAL_POINT_COLUMN = "minimal_point";
    public static final String LAB_WORK_TABLE_DESCRIPTION_COLUMN = "description";
    public static final String LAB_WORK_TABLE_TUNED_IN_WORKS_COLUMN = "tuned_in_works";
    public static final String LAB_WORK_TABLE_DIFFICULTY_COLUMN = "difficulty";
    public static final String LAB_WORK_TABLE_PERSON_ID_COLUMN = "person_id";
    public static final String LAB_WORK_TABLE_USER_ID_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    // COORDINATES_TABLE column names
    public static final String COORDINATES_TABLE_LAB_WORK_ID_COLUMN = "lab_work_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";
    // PERSON_TABLE column names
    public static final String PERSON_TABLE_ID_COLUMN = "id";
    public static final String PERSON_TABLE_NAME_COLUMN = "name";
    public static final String PERSON_TABLE_BIRTHDAY_COLUMN = "birthday";
    public static final String PERSON_TABLE_EYE_COLOR_COLUMN = "eye_color";
    public static final String PERSON_TABLE_HAIR_COLOR_COLUMN = "hair_color";
    public static final String PERSON_TABLE_NATIONALITY_COLUMN = "nationality";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DBInteraction(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    private void connectToDataBase() {
        try {

            connection = DriverManager.getConnection(url,user,password);
            System.out.println("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при подключении к базе данных!");
        }
    }

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            if (connection == null) System.out.println("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();

        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            System.out.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }


    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}